// NOTE: Assertions have been autogenerated by utils/update_mlir_test_checks.py
// RUN: circt-opt -lower-std-to-handshake %s | FileCheck %s
func @more_imperfectly_nested_loops() {
// CHECK:       module {

// CHECK-LABEL:   handshake.func @more_imperfectly_nested_loops(
// CHECK-SAME:                                                  %[[VAL_0:.*]]: none, ...) -> none attributes {argNames = ["inCtrl"], resNames = ["outCtrl"]} {
// CHECK:           %[[VAL_1:.*]] = branch(%[[VAL_0]]) {control = true} : (none) -> none
// CHECK:           %[[VAL_2:.*]]:2 = control_merge(%[[VAL_1]]) {control = true} : (none) -> (none, index)
// CHECK:           %[[VAL_3:.*]]:3 = fork(%[[VAL_2]]#0) {control = true} : (none) -> (none, none, none)
// CHECK:           sink(%[[VAL_2]]#1) : (index) -> ()
// CHECK:           %[[VAL_4:.*]] = constant(%[[VAL_3]]#1) {value = 0 : index} : (none) -> index
// CHECK:           %[[VAL_5:.*]] = constant(%[[VAL_3]]#0) {value = 42 : index} : (none) -> index
// CHECK:           %[[VAL_6:.*]] = branch(%[[VAL_3]]#2) {control = true} : (none) -> none
// CHECK:           %[[VAL_7:.*]] = branch(%[[VAL_4]]) : (index) -> index
// CHECK:           %[[VAL_8:.*]] = branch(%[[VAL_5]]) : (index) -> index
// CHECK:           %[[VAL_9:.*]] = mux(%[[VAL_10:.*]]#1, %[[VAL_11:.*]], %[[VAL_8]]) : (index, index, index) -> index
// CHECK:           %[[VAL_12:.*]]:2 = fork(%[[VAL_9]]) : (index) -> (index, index)
// CHECK:           %[[VAL_13:.*]]:2 = control_merge(%[[VAL_14:.*]], %[[VAL_6]]) {control = true} : (none, none) -> (none, index)
// CHECK:           %[[VAL_10]]:2 = fork(%[[VAL_13]]#1) : (index) -> (index, index)
// CHECK:           %[[VAL_15:.*]] = mux(%[[VAL_10]]#0, %[[VAL_16:.*]], %[[VAL_7]]) : (index, index, index) -> index
// CHECK:           %[[VAL_17:.*]]:2 = fork(%[[VAL_15]]) : (index) -> (index, index)
// CHECK:           %[[VAL_18:.*]] = arith.cmpi slt, %[[VAL_17]]#1, %[[VAL_12]]#1 : index
// CHECK:           %[[VAL_19:.*]]:3 = fork(%[[VAL_18]]) : (i1) -> (i1, i1, i1)
// CHECK:           %[[VAL_20:.*]], %[[VAL_21:.*]] = conditional_branch(%[[VAL_19]]#2, %[[VAL_12]]#0) : (i1, index) -> (index, index)
// CHECK:           sink(%[[VAL_21]]) : (index) -> ()
// CHECK:           %[[VAL_22:.*]], %[[VAL_23:.*]] = conditional_branch(%[[VAL_19]]#1, %[[VAL_13]]#0) {control = true} : (i1, none) -> (none, none)
// CHECK:           %[[VAL_24:.*]], %[[VAL_25:.*]] = conditional_branch(%[[VAL_19]]#0, %[[VAL_17]]#0) : (i1, index) -> (index, index)
// CHECK:           sink(%[[VAL_25]]) : (index) -> ()
// CHECK:           %[[VAL_26:.*]] = merge(%[[VAL_24]]) : (index) -> index
// CHECK:           %[[VAL_27:.*]] = merge(%[[VAL_20]]) : (index) -> index
// CHECK:           %[[VAL_28:.*]]:2 = control_merge(%[[VAL_22]]) {control = true} : (none) -> (none, index)
// CHECK:           sink(%[[VAL_28]]#1) : (index) -> ()
// CHECK:           %[[VAL_29:.*]] = branch(%[[VAL_26]]) : (index) -> index
// CHECK:           %[[VAL_30:.*]] = branch(%[[VAL_27]]) : (index) -> index
// CHECK:           %[[VAL_31:.*]] = branch(%[[VAL_28]]#0) {control = true} : (none) -> none
// CHECK:           %[[VAL_32:.*]] = merge(%[[VAL_29]]) : (index) -> index
// CHECK:           %[[VAL_33:.*]] = merge(%[[VAL_30]]) : (index) -> index
// CHECK:           %[[VAL_34:.*]]:2 = control_merge(%[[VAL_31]]) {control = true} : (none) -> (none, index)
// CHECK:           %[[VAL_35:.*]]:3 = fork(%[[VAL_34]]#0) {control = true} : (none) -> (none, none, none)
// CHECK:           sink(%[[VAL_34]]#1) : (index) -> ()
// CHECK:           %[[VAL_36:.*]] = constant(%[[VAL_35]]#1) {value = 7 : index} : (none) -> index
// CHECK:           %[[VAL_37:.*]] = constant(%[[VAL_35]]#0) {value = 56 : index} : (none) -> index
// CHECK:           %[[VAL_38:.*]] = branch(%[[VAL_32]]) : (index) -> index
// CHECK:           %[[VAL_39:.*]] = branch(%[[VAL_33]]) : (index) -> index
// CHECK:           %[[VAL_40:.*]] = branch(%[[VAL_35]]#2) {control = true} : (none) -> none
// CHECK:           %[[VAL_41:.*]] = branch(%[[VAL_36]]) : (index) -> index
// CHECK:           %[[VAL_42:.*]] = branch(%[[VAL_37]]) : (index) -> index
// CHECK:           %[[VAL_43:.*]] = mux(%[[VAL_44:.*]]#3, %[[VAL_45:.*]], %[[VAL_42]]) : (index, index, index) -> index
// CHECK:           %[[VAL_46:.*]]:2 = fork(%[[VAL_43]]) : (index) -> (index, index)
// CHECK:           %[[VAL_47:.*]] = mux(%[[VAL_44]]#2, %[[VAL_48:.*]], %[[VAL_38]]) : (index, index, index) -> index
// CHECK:           %[[VAL_49:.*]] = mux(%[[VAL_44]]#1, %[[VAL_50:.*]], %[[VAL_39]]) : (index, index, index) -> index
// CHECK:           %[[VAL_51:.*]]:2 = control_merge(%[[VAL_52:.*]], %[[VAL_40]]) {control = true} : (none, none) -> (none, index)
// CHECK:           %[[VAL_44]]:4 = fork(%[[VAL_51]]#1) : (index) -> (index, index, index, index)
// CHECK:           %[[VAL_53:.*]] = mux(%[[VAL_44]]#0, %[[VAL_54:.*]], %[[VAL_41]]) : (index, index, index) -> index
// CHECK:           %[[VAL_55:.*]]:2 = fork(%[[VAL_53]]) : (index) -> (index, index)
// CHECK:           %[[VAL_56:.*]] = arith.cmpi slt, %[[VAL_55]]#1, %[[VAL_46]]#1 : index
// CHECK:           %[[VAL_57:.*]]:5 = fork(%[[VAL_56]]) : (i1) -> (i1, i1, i1, i1, i1)
// CHECK:           %[[VAL_58:.*]], %[[VAL_59:.*]] = conditional_branch(%[[VAL_57]]#4, %[[VAL_46]]#0) : (i1, index) -> (index, index)
// CHECK:           sink(%[[VAL_59]]) : (index) -> ()
// CHECK:           %[[VAL_60:.*]], %[[VAL_61:.*]] = conditional_branch(%[[VAL_57]]#3, %[[VAL_47]]) : (i1, index) -> (index, index)
// CHECK:           %[[VAL_62:.*]], %[[VAL_63:.*]] = conditional_branch(%[[VAL_57]]#2, %[[VAL_49]]) : (i1, index) -> (index, index)
// CHECK:           %[[VAL_64:.*]], %[[VAL_65:.*]] = conditional_branch(%[[VAL_57]]#1, %[[VAL_51]]#0) {control = true} : (i1, none) -> (none, none)
// CHECK:           %[[VAL_66:.*]], %[[VAL_67:.*]] = conditional_branch(%[[VAL_57]]#0, %[[VAL_55]]#0) : (i1, index) -> (index, index)
// CHECK:           sink(%[[VAL_67]]) : (index) -> ()
// CHECK:           %[[VAL_68:.*]] = merge(%[[VAL_66]]) : (index) -> index
// CHECK:           %[[VAL_69:.*]] = merge(%[[VAL_58]]) : (index) -> index
// CHECK:           %[[VAL_70:.*]] = merge(%[[VAL_60]]) : (index) -> index
// CHECK:           %[[VAL_71:.*]] = merge(%[[VAL_62]]) : (index) -> index
// CHECK:           %[[VAL_72:.*]]:2 = control_merge(%[[VAL_64]]) {control = true} : (none) -> (none, index)
// CHECK:           %[[VAL_73:.*]]:2 = fork(%[[VAL_72]]#0) {control = true} : (none) -> (none, none)
// CHECK:           sink(%[[VAL_72]]#1) : (index) -> ()
// CHECK:           %[[VAL_74:.*]] = constant(%[[VAL_73]]#0) {value = 2 : index} : (none) -> index
// CHECK:           %[[VAL_75:.*]] = arith.addi %[[VAL_68]], %[[VAL_74]] : index
// CHECK:           %[[VAL_45]] = branch(%[[VAL_69]]) : (index) -> index
// CHECK:           %[[VAL_48]] = branch(%[[VAL_70]]) : (index) -> index
// CHECK:           %[[VAL_50]] = branch(%[[VAL_71]]) : (index) -> index
// CHECK:           %[[VAL_52]] = branch(%[[VAL_73]]#1) {control = true} : (none) -> none
// CHECK:           %[[VAL_54]] = branch(%[[VAL_75]]) : (index) -> index
// CHECK:           %[[VAL_76:.*]] = merge(%[[VAL_61]]) : (index) -> index
// CHECK:           %[[VAL_77:.*]] = merge(%[[VAL_63]]) : (index) -> index
// CHECK:           %[[VAL_78:.*]]:2 = control_merge(%[[VAL_65]]) {control = true} : (none) -> (none, index)
// CHECK:           sink(%[[VAL_78]]#1) : (index) -> ()
// CHECK:           %[[VAL_79:.*]] = branch(%[[VAL_76]]) : (index) -> index
// CHECK:           %[[VAL_80:.*]] = branch(%[[VAL_77]]) : (index) -> index
// CHECK:           %[[VAL_81:.*]] = branch(%[[VAL_78]]#0) {control = true} : (none) -> none
// CHECK:           %[[VAL_82:.*]] = merge(%[[VAL_79]]) : (index) -> index
// CHECK:           %[[VAL_83:.*]] = merge(%[[VAL_80]]) : (index) -> index
// CHECK:           %[[VAL_84:.*]]:2 = control_merge(%[[VAL_81]]) {control = true} : (none) -> (none, index)
// CHECK:           %[[VAL_85:.*]]:3 = fork(%[[VAL_84]]#0) {control = true} : (none) -> (none, none, none)
// CHECK:           sink(%[[VAL_84]]#1) : (index) -> ()
// CHECK:           %[[VAL_86:.*]] = constant(%[[VAL_85]]#1) {value = 18 : index} : (none) -> index
// CHECK:           %[[VAL_87:.*]] = constant(%[[VAL_85]]#0) {value = 37 : index} : (none) -> index
// CHECK:           %[[VAL_88:.*]] = branch(%[[VAL_82]]) : (index) -> index
// CHECK:           %[[VAL_89:.*]] = branch(%[[VAL_83]]) : (index) -> index
// CHECK:           %[[VAL_90:.*]] = branch(%[[VAL_85]]#2) {control = true} : (none) -> none
// CHECK:           %[[VAL_91:.*]] = branch(%[[VAL_86]]) : (index) -> index
// CHECK:           %[[VAL_92:.*]] = branch(%[[VAL_87]]) : (index) -> index
// CHECK:           %[[VAL_93:.*]] = mux(%[[VAL_94:.*]]#3, %[[VAL_95:.*]], %[[VAL_92]]) : (index, index, index) -> index
// CHECK:           %[[VAL_96:.*]]:2 = fork(%[[VAL_93]]) : (index) -> (index, index)
// CHECK:           %[[VAL_97:.*]] = mux(%[[VAL_94]]#2, %[[VAL_98:.*]], %[[VAL_88]]) : (index, index, index) -> index
// CHECK:           %[[VAL_99:.*]] = mux(%[[VAL_94]]#1, %[[VAL_100:.*]], %[[VAL_89]]) : (index, index, index) -> index
// CHECK:           %[[VAL_101:.*]]:2 = control_merge(%[[VAL_102:.*]], %[[VAL_90]]) {control = true} : (none, none) -> (none, index)
// CHECK:           %[[VAL_94]]:4 = fork(%[[VAL_101]]#1) : (index) -> (index, index, index, index)
// CHECK:           %[[VAL_103:.*]] = mux(%[[VAL_94]]#0, %[[VAL_104:.*]], %[[VAL_91]]) : (index, index, index) -> index
// CHECK:           %[[VAL_105:.*]]:2 = fork(%[[VAL_103]]) : (index) -> (index, index)
// CHECK:           %[[VAL_106:.*]] = arith.cmpi slt, %[[VAL_105]]#1, %[[VAL_96]]#1 : index
// CHECK:           %[[VAL_107:.*]]:5 = fork(%[[VAL_106]]) : (i1) -> (i1, i1, i1, i1, i1)
// CHECK:           %[[VAL_108:.*]], %[[VAL_109:.*]] = conditional_branch(%[[VAL_107]]#4, %[[VAL_96]]#0) : (i1, index) -> (index, index)
// CHECK:           sink(%[[VAL_109]]) : (index) -> ()
// CHECK:           %[[VAL_110:.*]], %[[VAL_111:.*]] = conditional_branch(%[[VAL_107]]#3, %[[VAL_97]]) : (i1, index) -> (index, index)
// CHECK:           %[[VAL_112:.*]], %[[VAL_113:.*]] = conditional_branch(%[[VAL_107]]#2, %[[VAL_99]]) : (i1, index) -> (index, index)
// CHECK:           %[[VAL_114:.*]], %[[VAL_115:.*]] = conditional_branch(%[[VAL_107]]#1, %[[VAL_101]]#0) {control = true} : (i1, none) -> (none, none)
// CHECK:           %[[VAL_116:.*]], %[[VAL_117:.*]] = conditional_branch(%[[VAL_107]]#0, %[[VAL_105]]#0) : (i1, index) -> (index, index)
// CHECK:           sink(%[[VAL_117]]) : (index) -> ()
// CHECK:           %[[VAL_118:.*]] = merge(%[[VAL_116]]) : (index) -> index
// CHECK:           %[[VAL_119:.*]] = merge(%[[VAL_108]]) : (index) -> index
// CHECK:           %[[VAL_120:.*]] = merge(%[[VAL_110]]) : (index) -> index
// CHECK:           %[[VAL_121:.*]] = merge(%[[VAL_112]]) : (index) -> index
// CHECK:           %[[VAL_122:.*]]:2 = control_merge(%[[VAL_114]]) {control = true} : (none) -> (none, index)
// CHECK:           %[[VAL_123:.*]]:2 = fork(%[[VAL_122]]#0) {control = true} : (none) -> (none, none)
// CHECK:           sink(%[[VAL_122]]#1) : (index) -> ()
// CHECK:           %[[VAL_124:.*]] = constant(%[[VAL_123]]#0) {value = 3 : index} : (none) -> index
// CHECK:           %[[VAL_125:.*]] = arith.addi %[[VAL_118]], %[[VAL_124]] : index
// CHECK:           %[[VAL_95]] = branch(%[[VAL_119]]) : (index) -> index
// CHECK:           %[[VAL_98]] = branch(%[[VAL_120]]) : (index) -> index
// CHECK:           %[[VAL_100]] = branch(%[[VAL_121]]) : (index) -> index
// CHECK:           %[[VAL_102]] = branch(%[[VAL_123]]#1) {control = true} : (none) -> none
// CHECK:           %[[VAL_104]] = branch(%[[VAL_125]]) : (index) -> index
// CHECK:           %[[VAL_126:.*]] = merge(%[[VAL_111]]) : (index) -> index
// CHECK:           %[[VAL_127:.*]] = merge(%[[VAL_113]]) : (index) -> index
// CHECK:           %[[VAL_128:.*]]:2 = control_merge(%[[VAL_115]]) {control = true} : (none) -> (none, index)
// CHECK:           %[[VAL_129:.*]]:2 = fork(%[[VAL_128]]#0) {control = true} : (none) -> (none, none)
// CHECK:           sink(%[[VAL_128]]#1) : (index) -> ()
// CHECK:           %[[VAL_130:.*]] = constant(%[[VAL_129]]#0) {value = 1 : index} : (none) -> index
// CHECK:           %[[VAL_131:.*]] = arith.addi %[[VAL_126]], %[[VAL_130]] : index
// CHECK:           %[[VAL_11]] = branch(%[[VAL_127]]) : (index) -> index
// CHECK:           %[[VAL_14]] = branch(%[[VAL_129]]#1) {control = true} : (none) -> none
// CHECK:           %[[VAL_16]] = branch(%[[VAL_131]]) : (index) -> index
// CHECK:           %[[VAL_132:.*]]:2 = control_merge(%[[VAL_23]]) {control = true} : (none) -> (none, index)
// CHECK:           sink(%[[VAL_132]]#1) : (index) -> ()
// CHECK:           return %[[VAL_132]]#0 : none
// CHECK:         }
// CHECK:       }

^bb0:
  br ^bb1
^bb1:	// pred: ^bb0
  %c0 = arith.constant 0 : index
  %c42 = arith.constant 42 : index
  br ^bb2(%c0 : index)
^bb2(%0: index):	// 2 preds: ^bb1, ^bb11
  %1 = arith.cmpi slt, %0, %c42 : index
  cond_br %1, ^bb3, ^bb12
^bb3:	// pred: ^bb2
  br ^bb4
^bb4:	// pred: ^bb3
  %c7 = arith.constant 7 : index
  %c56 = arith.constant 56 : index
  br ^bb5(%c7 : index)
^bb5(%2: index):	// 2 preds: ^bb4, ^bb6
  %3 = arith.cmpi slt, %2, %c56 : index
  cond_br %3, ^bb6, ^bb7
^bb6:	// pred: ^bb5
  %c2 = arith.constant 2 : index
  %4 = arith.addi %2, %c2 : index
  br ^bb5(%4 : index)
^bb7:	// pred: ^bb5
  br ^bb8
^bb8:	// pred: ^bb7
  %c18 = arith.constant 18 : index
  %c37 = arith.constant 37 : index
  br ^bb9(%c18 : index)
^bb9(%5: index):	// 2 preds: ^bb8, ^bb10
  %6 = arith.cmpi slt, %5, %c37 : index
  cond_br %6, ^bb10, ^bb11
^bb10:	// pred: ^bb9
  %c3 = arith.constant 3 : index
  %7 = arith.addi %5, %c3 : index
  br ^bb9(%7 : index)
^bb11:	// pred: ^bb9
  %c1 = arith.constant 1 : index
  %8 = arith.addi %0, %c1 : index
  br ^bb2(%8 : index)
^bb12:	// pred: ^bb2
  return
}
