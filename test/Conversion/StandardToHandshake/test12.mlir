// NOTE: Assertions have been autogenerated by utils/update_mlir_test_checks.py
// RUN: circt-opt -lower-std-to-handshake %s | FileCheck %s
  func @more_imperfectly_nested_loops() {
// CHECK:       module {

// CHECK-LABEL:   handshake.func @more_imperfectly_nested_loops(
// CHECK-SAME:                                                  %[[VAL_0:.*]]: none, ...) -> none attributes {argNames = ["inCtrl"], resNames = ["outCtrl"]} {
// CHECK:           %[[VAL_1:.*]]:4 = fork(%[[VAL_0]]) {control = true} : (none) -> (none, none, none, none)
// CHECK:           %[[VAL_2:.*]] = constant(%[[VAL_1]]#2) {value = 0 : index} : (none) -> index
// CHECK:           %[[VAL_3:.*]] = constant(%[[VAL_1]]#1) {value = 42 : index} : (none) -> index
// CHECK:           %[[VAL_4:.*]] = constant(%[[VAL_1]]#0) {value = 1 : index} : (none) -> index
// CHECK:           %[[VAL_5:.*]] = branch(%[[VAL_1]]#3) {control = true} : (none) -> none
// CHECK:           %[[VAL_6:.*]] = branch(%[[VAL_2]]) : (index) -> index
// CHECK:           %[[VAL_7:.*]] = branch(%[[VAL_3]]) : (index) -> index
// CHECK:           %[[VAL_8:.*]] = branch(%[[VAL_4]]) : (index) -> index
// CHECK:           %[[VAL_9:.*]] = mux(%[[VAL_10:.*]]#2, %[[VAL_11:.*]], %[[VAL_7]]) : (index, index, index) -> index
// CHECK:           %[[VAL_12:.*]]:2 = fork(%[[VAL_9]]) : (index) -> (index, index)
// CHECK:           %[[VAL_13:.*]] = mux(%[[VAL_10]]#1, %[[VAL_14:.*]], %[[VAL_8]]) : (index, index, index) -> index
// CHECK:           %[[VAL_15:.*]]:2 = control_merge(%[[VAL_16:.*]], %[[VAL_5]]) {control = true} : (none, none) -> (none, index)
// CHECK:           %[[VAL_10]]:3 = fork(%[[VAL_15]]#1) : (index) -> (index, index, index)
// CHECK:           %[[VAL_17:.*]] = mux(%[[VAL_10]]#0, %[[VAL_18:.*]], %[[VAL_6]]) : (index, index, index) -> index
// CHECK:           %[[VAL_19:.*]]:2 = fork(%[[VAL_17]]) : (index) -> (index, index)
// CHECK:           %[[VAL_20:.*]] = arith.cmpi slt, %[[VAL_19]]#1, %[[VAL_12]]#1 : index
// CHECK:           %[[VAL_21:.*]]:4 = fork(%[[VAL_20]]) : (i1) -> (i1, i1, i1, i1)
// CHECK:           %[[VAL_22:.*]], %[[VAL_23:.*]] = conditional_branch(%[[VAL_21]]#3, %[[VAL_12]]#0) : (i1, index) -> (index, index)
// CHECK:           sink(%[[VAL_23]]) : (index) -> ()
// CHECK:           %[[VAL_24:.*]], %[[VAL_25:.*]] = conditional_branch(%[[VAL_21]]#2, %[[VAL_13]]) : (i1, index) -> (index, index)
// CHECK:           sink(%[[VAL_25]]) : (index) -> ()
// CHECK:           %[[VAL_26:.*]], %[[VAL_27:.*]] = conditional_branch(%[[VAL_21]]#1, %[[VAL_15]]#0) {control = true} : (i1, none) -> (none, none)
// CHECK:           %[[VAL_28:.*]], %[[VAL_29:.*]] = conditional_branch(%[[VAL_21]]#0, %[[VAL_19]]#0) : (i1, index) -> (index, index)
// CHECK:           sink(%[[VAL_29]]) : (index) -> ()
// CHECK:           %[[VAL_30:.*]] = merge(%[[VAL_28]]) : (index) -> index
// CHECK:           %[[VAL_31:.*]] = merge(%[[VAL_24]]) : (index) -> index
// CHECK:           %[[VAL_32:.*]] = merge(%[[VAL_22]]) : (index) -> index
// CHECK:           %[[VAL_33:.*]]:2 = control_merge(%[[VAL_26]]) {control = true} : (none) -> (none, index)
// CHECK:           %[[VAL_34:.*]]:4 = fork(%[[VAL_33]]#0) {control = true} : (none) -> (none, none, none, none)
// CHECK:           sink(%[[VAL_33]]#1) : (index) -> ()
// CHECK:           %[[VAL_35:.*]] = constant(%[[VAL_34]]#2) {value = 7 : index} : (none) -> index
// CHECK:           %[[VAL_36:.*]] = constant(%[[VAL_34]]#1) {value = 56 : index} : (none) -> index
// CHECK:           %[[VAL_37:.*]] = constant(%[[VAL_34]]#0) {value = 2 : index} : (none) -> index
// CHECK:           %[[VAL_38:.*]] = branch(%[[VAL_30]]) : (index) -> index
// CHECK:           %[[VAL_39:.*]] = branch(%[[VAL_31]]) : (index) -> index
// CHECK:           %[[VAL_40:.*]] = branch(%[[VAL_32]]) : (index) -> index
// CHECK:           %[[VAL_41:.*]] = branch(%[[VAL_34]]#3) {control = true} : (none) -> none
// CHECK:           %[[VAL_42:.*]] = branch(%[[VAL_35]]) : (index) -> index
// CHECK:           %[[VAL_43:.*]] = branch(%[[VAL_36]]) : (index) -> index
// CHECK:           %[[VAL_44:.*]] = branch(%[[VAL_37]]) : (index) -> index
// CHECK:           %[[VAL_45:.*]] = mux(%[[VAL_46:.*]]#5, %[[VAL_47:.*]], %[[VAL_43]]) : (index, index, index) -> index
// CHECK:           %[[VAL_48:.*]]:2 = fork(%[[VAL_45]]) : (index) -> (index, index)
// CHECK:           %[[VAL_49:.*]] = mux(%[[VAL_46]]#4, %[[VAL_50:.*]], %[[VAL_44]]) : (index, index, index) -> index
// CHECK:           %[[VAL_51:.*]] = mux(%[[VAL_46]]#3, %[[VAL_52:.*]], %[[VAL_38]]) : (index, index, index) -> index
// CHECK:           %[[VAL_53:.*]] = mux(%[[VAL_46]]#2, %[[VAL_54:.*]], %[[VAL_39]]) : (index, index, index) -> index
// CHECK:           %[[VAL_55:.*]] = mux(%[[VAL_46]]#1, %[[VAL_56:.*]], %[[VAL_40]]) : (index, index, index) -> index
// CHECK:           %[[VAL_57:.*]]:2 = control_merge(%[[VAL_58:.*]], %[[VAL_41]]) {control = true} : (none, none) -> (none, index)
// CHECK:           %[[VAL_46]]:6 = fork(%[[VAL_57]]#1) : (index) -> (index, index, index, index, index, index)
// CHECK:           %[[VAL_59:.*]] = mux(%[[VAL_46]]#0, %[[VAL_60:.*]], %[[VAL_42]]) : (index, index, index) -> index
// CHECK:           %[[VAL_61:.*]]:2 = fork(%[[VAL_59]]) : (index) -> (index, index)
// CHECK:           %[[VAL_62:.*]] = arith.cmpi slt, %[[VAL_61]]#1, %[[VAL_48]]#1 : index
// CHECK:           %[[VAL_63:.*]]:7 = fork(%[[VAL_62]]) : (i1) -> (i1, i1, i1, i1, i1, i1, i1)
// CHECK:           %[[VAL_64:.*]], %[[VAL_65:.*]] = conditional_branch(%[[VAL_63]]#6, %[[VAL_48]]#0) : (i1, index) -> (index, index)
// CHECK:           sink(%[[VAL_65]]) : (index) -> ()
// CHECK:           %[[VAL_66:.*]], %[[VAL_67:.*]] = conditional_branch(%[[VAL_63]]#5, %[[VAL_49]]) : (i1, index) -> (index, index)
// CHECK:           sink(%[[VAL_67]]) : (index) -> ()
// CHECK:           %[[VAL_68:.*]], %[[VAL_69:.*]] = conditional_branch(%[[VAL_63]]#4, %[[VAL_51]]) : (i1, index) -> (index, index)
// CHECK:           %[[VAL_70:.*]], %[[VAL_71:.*]] = conditional_branch(%[[VAL_63]]#3, %[[VAL_53]]) : (i1, index) -> (index, index)
// CHECK:           %[[VAL_72:.*]], %[[VAL_73:.*]] = conditional_branch(%[[VAL_63]]#2, %[[VAL_55]]) : (i1, index) -> (index, index)
// CHECK:           %[[VAL_74:.*]], %[[VAL_75:.*]] = conditional_branch(%[[VAL_63]]#1, %[[VAL_57]]#0) {control = true} : (i1, none) -> (none, none)
// CHECK:           %[[VAL_76:.*]], %[[VAL_77:.*]] = conditional_branch(%[[VAL_63]]#0, %[[VAL_61]]#0) : (i1, index) -> (index, index)
// CHECK:           sink(%[[VAL_77]]) : (index) -> ()
// CHECK:           %[[VAL_78:.*]] = merge(%[[VAL_76]]) : (index) -> index
// CHECK:           %[[VAL_79:.*]] = merge(%[[VAL_66]]) : (index) -> index
// CHECK:           %[[VAL_80:.*]]:2 = fork(%[[VAL_79]]) : (index) -> (index, index)
// CHECK:           %[[VAL_81:.*]] = merge(%[[VAL_64]]) : (index) -> index
// CHECK:           %[[VAL_82:.*]] = merge(%[[VAL_68]]) : (index) -> index
// CHECK:           %[[VAL_83:.*]] = merge(%[[VAL_70]]) : (index) -> index
// CHECK:           %[[VAL_84:.*]] = merge(%[[VAL_72]]) : (index) -> index
// CHECK:           %[[VAL_85:.*]]:2 = control_merge(%[[VAL_74]]) {control = true} : (none) -> (none, index)
// CHECK:           sink(%[[VAL_85]]#1) : (index) -> ()
// CHECK:           %[[VAL_86:.*]] = arith.addi %[[VAL_78]], %[[VAL_80]]#1 : index
// CHECK:           %[[VAL_50]] = branch(%[[VAL_80]]#0) : (index) -> index
// CHECK:           %[[VAL_47]] = branch(%[[VAL_81]]) : (index) -> index
// CHECK:           %[[VAL_52]] = branch(%[[VAL_82]]) : (index) -> index
// CHECK:           %[[VAL_54]] = branch(%[[VAL_83]]) : (index) -> index
// CHECK:           %[[VAL_56]] = branch(%[[VAL_84]]) : (index) -> index
// CHECK:           %[[VAL_58]] = branch(%[[VAL_85]]#0) {control = true} : (none) -> none
// CHECK:           %[[VAL_60]] = branch(%[[VAL_86]]) : (index) -> index
// CHECK:           %[[VAL_87:.*]] = merge(%[[VAL_69]]) : (index) -> index
// CHECK:           %[[VAL_88:.*]] = merge(%[[VAL_71]]) : (index) -> index
// CHECK:           %[[VAL_89:.*]] = merge(%[[VAL_73]]) : (index) -> index
// CHECK:           %[[VAL_90:.*]]:2 = control_merge(%[[VAL_75]]) {control = true} : (none) -> (none, index)
// CHECK:           %[[VAL_91:.*]]:4 = fork(%[[VAL_90]]#0) {control = true} : (none) -> (none, none, none, none)
// CHECK:           sink(%[[VAL_90]]#1) : (index) -> ()
// CHECK:           %[[VAL_92:.*]] = constant(%[[VAL_91]]#2) {value = 18 : index} : (none) -> index
// CHECK:           %[[VAL_93:.*]] = constant(%[[VAL_91]]#1) {value = 37 : index} : (none) -> index
// CHECK:           %[[VAL_94:.*]] = constant(%[[VAL_91]]#0) {value = 3 : index} : (none) -> index
// CHECK:           %[[VAL_95:.*]] = branch(%[[VAL_87]]) : (index) -> index
// CHECK:           %[[VAL_96:.*]] = branch(%[[VAL_88]]) : (index) -> index
// CHECK:           %[[VAL_97:.*]] = branch(%[[VAL_89]]) : (index) -> index
// CHECK:           %[[VAL_98:.*]] = branch(%[[VAL_91]]#3) {control = true} : (none) -> none
// CHECK:           %[[VAL_99:.*]] = branch(%[[VAL_92]]) : (index) -> index
// CHECK:           %[[VAL_100:.*]] = branch(%[[VAL_93]]) : (index) -> index
// CHECK:           %[[VAL_101:.*]] = branch(%[[VAL_94]]) : (index) -> index
// CHECK:           %[[VAL_102:.*]] = mux(%[[VAL_103:.*]]#5, %[[VAL_104:.*]], %[[VAL_100]]) : (index, index, index) -> index
// CHECK:           %[[VAL_105:.*]]:2 = fork(%[[VAL_102]]) : (index) -> (index, index)
// CHECK:           %[[VAL_106:.*]] = mux(%[[VAL_103]]#4, %[[VAL_107:.*]], %[[VAL_101]]) : (index, index, index) -> index
// CHECK:           %[[VAL_108:.*]] = mux(%[[VAL_103]]#3, %[[VAL_109:.*]], %[[VAL_95]]) : (index, index, index) -> index
// CHECK:           %[[VAL_110:.*]] = mux(%[[VAL_103]]#2, %[[VAL_111:.*]], %[[VAL_96]]) : (index, index, index) -> index
// CHECK:           %[[VAL_112:.*]] = mux(%[[VAL_103]]#1, %[[VAL_113:.*]], %[[VAL_97]]) : (index, index, index) -> index
// CHECK:           %[[VAL_114:.*]]:2 = control_merge(%[[VAL_115:.*]], %[[VAL_98]]) {control = true} : (none, none) -> (none, index)
// CHECK:           %[[VAL_103]]:6 = fork(%[[VAL_114]]#1) : (index) -> (index, index, index, index, index, index)
// CHECK:           %[[VAL_116:.*]] = mux(%[[VAL_103]]#0, %[[VAL_117:.*]], %[[VAL_99]]) : (index, index, index) -> index
// CHECK:           %[[VAL_118:.*]]:2 = fork(%[[VAL_116]]) : (index) -> (index, index)
// CHECK:           %[[VAL_119:.*]] = arith.cmpi slt, %[[VAL_118]]#1, %[[VAL_105]]#1 : index
// CHECK:           %[[VAL_120:.*]]:7 = fork(%[[VAL_119]]) : (i1) -> (i1, i1, i1, i1, i1, i1, i1)
// CHECK:           %[[VAL_121:.*]], %[[VAL_122:.*]] = conditional_branch(%[[VAL_120]]#6, %[[VAL_105]]#0) : (i1, index) -> (index, index)
// CHECK:           sink(%[[VAL_122]]) : (index) -> ()
// CHECK:           %[[VAL_123:.*]], %[[VAL_124:.*]] = conditional_branch(%[[VAL_120]]#5, %[[VAL_106]]) : (i1, index) -> (index, index)
// CHECK:           sink(%[[VAL_124]]) : (index) -> ()
// CHECK:           %[[VAL_125:.*]], %[[VAL_126:.*]] = conditional_branch(%[[VAL_120]]#4, %[[VAL_108]]) : (i1, index) -> (index, index)
// CHECK:           %[[VAL_127:.*]], %[[VAL_128:.*]] = conditional_branch(%[[VAL_120]]#3, %[[VAL_110]]) : (i1, index) -> (index, index)
// CHECK:           %[[VAL_129:.*]], %[[VAL_130:.*]] = conditional_branch(%[[VAL_120]]#2, %[[VAL_112]]) : (i1, index) -> (index, index)
// CHECK:           %[[VAL_131:.*]], %[[VAL_132:.*]] = conditional_branch(%[[VAL_120]]#1, %[[VAL_114]]#0) {control = true} : (i1, none) -> (none, none)
// CHECK:           %[[VAL_133:.*]], %[[VAL_134:.*]] = conditional_branch(%[[VAL_120]]#0, %[[VAL_118]]#0) : (i1, index) -> (index, index)
// CHECK:           sink(%[[VAL_134]]) : (index) -> ()
// CHECK:           %[[VAL_135:.*]] = merge(%[[VAL_133]]) : (index) -> index
// CHECK:           %[[VAL_136:.*]] = merge(%[[VAL_123]]) : (index) -> index
// CHECK:           %[[VAL_137:.*]]:2 = fork(%[[VAL_136]]) : (index) -> (index, index)
// CHECK:           %[[VAL_138:.*]] = merge(%[[VAL_121]]) : (index) -> index
// CHECK:           %[[VAL_139:.*]] = merge(%[[VAL_125]]) : (index) -> index
// CHECK:           %[[VAL_140:.*]] = merge(%[[VAL_127]]) : (index) -> index
// CHECK:           %[[VAL_141:.*]] = merge(%[[VAL_129]]) : (index) -> index
// CHECK:           %[[VAL_142:.*]]:2 = control_merge(%[[VAL_131]]) {control = true} : (none) -> (none, index)
// CHECK:           sink(%[[VAL_142]]#1) : (index) -> ()
// CHECK:           %[[VAL_143:.*]] = arith.addi %[[VAL_135]], %[[VAL_137]]#1 : index
// CHECK:           %[[VAL_107]] = branch(%[[VAL_137]]#0) : (index) -> index
// CHECK:           %[[VAL_104]] = branch(%[[VAL_138]]) : (index) -> index
// CHECK:           %[[VAL_109]] = branch(%[[VAL_139]]) : (index) -> index
// CHECK:           %[[VAL_111]] = branch(%[[VAL_140]]) : (index) -> index
// CHECK:           %[[VAL_113]] = branch(%[[VAL_141]]) : (index) -> index
// CHECK:           %[[VAL_115]] = branch(%[[VAL_142]]#0) {control = true} : (none) -> none
// CHECK:           %[[VAL_117]] = branch(%[[VAL_143]]) : (index) -> index
// CHECK:           %[[VAL_144:.*]] = merge(%[[VAL_126]]) : (index) -> index
// CHECK:           %[[VAL_145:.*]] = merge(%[[VAL_128]]) : (index) -> index
// CHECK:           %[[VAL_146:.*]]:2 = fork(%[[VAL_145]]) : (index) -> (index, index)
// CHECK:           %[[VAL_147:.*]] = merge(%[[VAL_130]]) : (index) -> index
// CHECK:           %[[VAL_148:.*]]:2 = control_merge(%[[VAL_132]]) {control = true} : (none) -> (none, index)
// CHECK:           sink(%[[VAL_148]]#1) : (index) -> ()
// CHECK:           %[[VAL_149:.*]] = arith.addi %[[VAL_144]], %[[VAL_146]]#1 : index
// CHECK:           %[[VAL_14]] = branch(%[[VAL_146]]#0) : (index) -> index
// CHECK:           %[[VAL_11]] = branch(%[[VAL_147]]) : (index) -> index
// CHECK:           %[[VAL_16]] = branch(%[[VAL_148]]#0) {control = true} : (none) -> none
// CHECK:           %[[VAL_18]] = branch(%[[VAL_149]]) : (index) -> index
// CHECK:           %[[VAL_150:.*]]:2 = control_merge(%[[VAL_27]]) {control = true} : (none) -> (none, index)
// CHECK:           sink(%[[VAL_150]]#1) : (index) -> ()
// CHECK:           return %[[VAL_150]]#0 : none
// CHECK:         }
// CHECK:       }

    %c0 = arith.constant 0 : index
    %c42 = arith.constant 42 : index
    %c1 = arith.constant 1 : index
    br ^bb1(%c0 : index)
  ^bb1(%0: index):      // 2 preds: ^bb0, ^bb8
    %1 = arith.cmpi slt, %0, %c42 : index
    cond_br %1, ^bb2, ^bb9
  ^bb2: // pred: ^bb1
    %c7 = arith.constant 7 : index
    %c56 = arith.constant 56 : index
    %c2 = arith.constant 2 : index
    br ^bb3(%c7 : index)
  ^bb3(%2: index):      // 2 preds: ^bb2, ^bb4
    %3 = arith.cmpi slt, %2, %c56 : index
    cond_br %3, ^bb4, ^bb5
  ^bb4: // pred: ^bb3
    %4 = arith.addi %2, %c2 : index
    br ^bb3(%4 : index)
  ^bb5: // pred: ^bb3
    %c18 = arith.constant 18 : index
    %c37 = arith.constant 37 : index
    %c3 = arith.constant 3 : index
    br ^bb6(%c18 : index)
  ^bb6(%5: index):      // 2 preds: ^bb5, ^bb7
    %6 = arith.cmpi slt, %5, %c37 : index
    cond_br %6, ^bb7, ^bb8
  ^bb7: // pred: ^bb6
    %7 = arith.addi %5, %c3 : index
    br ^bb6(%7 : index)
  ^bb8: // pred: ^bb6
    %8 = arith.addi %0, %c1 : index
    br ^bb1(%8 : index)
  ^bb9: // pred: ^bb1
    return
  }
