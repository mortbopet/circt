// NOTE: Assertions have been autogenerated by utils/update_mlir_test_checks.py
// RUN: circt-opt -lower-std-to-handshake %s | FileCheck %s
func @loop_min_max(%arg0: index) {
// CHECK:       module {

// CHECK-LABEL:   handshake.func @loop_min_max(
// CHECK-SAME:                                 %[[VAL_0:.*]]: index, %[[VAL_1:.*]]: none, ...) -> none attributes {argNames = ["in0", "inCtrl"], resNames = ["outCtrl"]} {
// CHECK:           %[[VAL_2:.*]] = merge(%[[VAL_0]]) : (index) -> index
// CHECK:           %[[VAL_3:.*]]:4 = fork(%[[VAL_1]]) {control = true} : (none) -> (none, none, none, none)
// CHECK:           %[[VAL_4:.*]] = constant(%[[VAL_3]]#2) {value = 0 : index} : (none) -> index
// CHECK:           %[[VAL_5:.*]] = constant(%[[VAL_3]]#1) {value = 42 : index} : (none) -> index
// CHECK:           %[[VAL_6:.*]] = constant(%[[VAL_3]]#0) {value = 1 : index} : (none) -> index
// CHECK:           %[[VAL_7:.*]] = branch(%[[VAL_2]]) : (index) -> index
// CHECK:           %[[VAL_8:.*]] = branch(%[[VAL_3]]#3) {control = true} : (none) -> none
// CHECK:           %[[VAL_9:.*]] = branch(%[[VAL_4]]) : (index) -> index
// CHECK:           %[[VAL_10:.*]] = branch(%[[VAL_5]]) : (index) -> index
// CHECK:           %[[VAL_11:.*]] = branch(%[[VAL_6]]) : (index) -> index
// CHECK:           %[[VAL_12:.*]] = mux(%[[VAL_13:.*]]#3, %[[VAL_14:.*]], %[[VAL_10]]) : (index, index, index) -> index
// CHECK:           %[[VAL_15:.*]]:2 = fork(%[[VAL_12]]) : (index) -> (index, index)
// CHECK:           %[[VAL_16:.*]] = mux(%[[VAL_13]]#2, %[[VAL_17:.*]], %[[VAL_7]]) : (index, index, index) -> index
// CHECK:           %[[VAL_18:.*]] = mux(%[[VAL_13]]#1, %[[VAL_19:.*]], %[[VAL_11]]) : (index, index, index) -> index
// CHECK:           %[[VAL_20:.*]]:2 = control_merge(%[[VAL_21:.*]], %[[VAL_8]]) {control = true} : (none, none) -> (none, index)
// CHECK:           %[[VAL_13]]:4 = fork(%[[VAL_20]]#1) : (index) -> (index, index, index, index)
// CHECK:           %[[VAL_22:.*]] = mux(%[[VAL_13]]#0, %[[VAL_23:.*]], %[[VAL_9]]) : (index, index, index) -> index
// CHECK:           %[[VAL_24:.*]]:2 = fork(%[[VAL_22]]) : (index) -> (index, index)
// CHECK:           %[[VAL_25:.*]] = arith.cmpi slt, %[[VAL_24]]#1, %[[VAL_15]]#1 : index
// CHECK:           %[[VAL_26:.*]]:5 = fork(%[[VAL_25]]) : (i1) -> (i1, i1, i1, i1, i1)
// CHECK:           %[[VAL_27:.*]], %[[VAL_28:.*]] = conditional_branch(%[[VAL_26]]#4, %[[VAL_15]]#0) : (i1, index) -> (index, index)
// CHECK:           sink(%[[VAL_28]]) : (index) -> ()
// CHECK:           %[[VAL_29:.*]], %[[VAL_30:.*]] = conditional_branch(%[[VAL_26]]#3, %[[VAL_16]]) : (i1, index) -> (index, index)
// CHECK:           sink(%[[VAL_30]]) : (index) -> ()
// CHECK:           %[[VAL_31:.*]], %[[VAL_32:.*]] = conditional_branch(%[[VAL_26]]#2, %[[VAL_18]]) : (i1, index) -> (index, index)
// CHECK:           sink(%[[VAL_32]]) : (index) -> ()
// CHECK:           %[[VAL_33:.*]], %[[VAL_34:.*]] = conditional_branch(%[[VAL_26]]#1, %[[VAL_20]]#0) {control = true} : (i1, none) -> (none, none)
// CHECK:           %[[VAL_35:.*]], %[[VAL_36:.*]] = conditional_branch(%[[VAL_26]]#0, %[[VAL_24]]#0) : (i1, index) -> (index, index)
// CHECK:           sink(%[[VAL_36]]) : (index) -> ()
// CHECK:           %[[VAL_37:.*]] = merge(%[[VAL_35]]) : (index) -> index
// CHECK:           %[[VAL_38:.*]]:5 = fork(%[[VAL_37]]) : (index) -> (index, index, index, index, index)
// CHECK:           %[[VAL_39:.*]] = merge(%[[VAL_29]]) : (index) -> index
// CHECK:           %[[VAL_40:.*]]:4 = fork(%[[VAL_39]]) : (index) -> (index, index, index, index)
// CHECK:           %[[VAL_41:.*]] = merge(%[[VAL_31]]) : (index) -> index
// CHECK:           %[[VAL_42:.*]] = merge(%[[VAL_27]]) : (index) -> index
// CHECK:           %[[VAL_43:.*]]:2 = control_merge(%[[VAL_33]]) {control = true} : (none) -> (none, index)
// CHECK:           %[[VAL_44:.*]]:4 = fork(%[[VAL_43]]#0) {control = true} : (none) -> (none, none, none, none)
// CHECK:           sink(%[[VAL_43]]#1) : (index) -> ()
// CHECK:           %[[VAL_45:.*]] = constant(%[[VAL_44]]#2) {value = -1 : index} : (none) -> index
// CHECK:           %[[VAL_46:.*]] = arith.muli %[[VAL_38]]#4, %[[VAL_45]] : index
// CHECK:           %[[VAL_47:.*]] = arith.addi %[[VAL_46]], %[[VAL_40]]#3 : index
// CHECK:           %[[VAL_48:.*]]:2 = fork(%[[VAL_47]]) : (index) -> (index, index)
// CHECK:           %[[VAL_49:.*]] = arith.cmpi sgt, %[[VAL_38]]#3, %[[VAL_48]]#1 : index
// CHECK:           %[[VAL_50:.*]] = select %[[VAL_49]], %[[VAL_38]]#2, %[[VAL_48]]#0 : index
// CHECK:           %[[VAL_51:.*]] = constant(%[[VAL_44]]#1) {value = 10 : index} : (none) -> index
// CHECK:           %[[VAL_52:.*]] = arith.addi %[[VAL_38]]#1, %[[VAL_51]] : index
// CHECK:           %[[VAL_53:.*]]:2 = fork(%[[VAL_52]]) : (index) -> (index, index)
// CHECK:           %[[VAL_54:.*]] = arith.cmpi slt, %[[VAL_40]]#2, %[[VAL_53]]#1 : index
// CHECK:           %[[VAL_55:.*]] = select %[[VAL_54]], %[[VAL_40]]#1, %[[VAL_53]]#0 : index
// CHECK:           %[[VAL_56:.*]] = constant(%[[VAL_44]]#0) {value = 1 : index} : (none) -> index
// CHECK:           %[[VAL_57:.*]] = branch(%[[VAL_38]]#0) : (index) -> index
// CHECK:           %[[VAL_58:.*]] = branch(%[[VAL_40]]#0) : (index) -> index
// CHECK:           %[[VAL_59:.*]] = branch(%[[VAL_41]]) : (index) -> index
// CHECK:           %[[VAL_60:.*]] = branch(%[[VAL_42]]) : (index) -> index
// CHECK:           %[[VAL_61:.*]] = branch(%[[VAL_44]]#3) {control = true} : (none) -> none
// CHECK:           %[[VAL_62:.*]] = branch(%[[VAL_50]]) : (index) -> index
// CHECK:           %[[VAL_63:.*]] = branch(%[[VAL_55]]) : (index) -> index
// CHECK:           %[[VAL_64:.*]] = branch(%[[VAL_56]]) : (index) -> index
// CHECK:           %[[VAL_65:.*]] = mux(%[[VAL_66:.*]]#6, %[[VAL_67:.*]], %[[VAL_63]]) : (index, index, index) -> index
// CHECK:           %[[VAL_68:.*]]:2 = fork(%[[VAL_65]]) : (index) -> (index, index)
// CHECK:           %[[VAL_69:.*]] = mux(%[[VAL_66]]#5, %[[VAL_70:.*]], %[[VAL_64]]) : (index, index, index) -> index
// CHECK:           %[[VAL_71:.*]] = mux(%[[VAL_66]]#4, %[[VAL_72:.*]], %[[VAL_57]]) : (index, index, index) -> index
// CHECK:           %[[VAL_73:.*]] = mux(%[[VAL_66]]#3, %[[VAL_74:.*]], %[[VAL_59]]) : (index, index, index) -> index
// CHECK:           %[[VAL_75:.*]] = mux(%[[VAL_66]]#2, %[[VAL_76:.*]], %[[VAL_60]]) : (index, index, index) -> index
// CHECK:           %[[VAL_77:.*]] = mux(%[[VAL_66]]#1, %[[VAL_78:.*]], %[[VAL_58]]) : (index, index, index) -> index
// CHECK:           %[[VAL_79:.*]]:2 = control_merge(%[[VAL_80:.*]], %[[VAL_61]]) {control = true} : (none, none) -> (none, index)
// CHECK:           %[[VAL_66]]:7 = fork(%[[VAL_79]]#1) : (index) -> (index, index, index, index, index, index, index)
// CHECK:           %[[VAL_81:.*]] = mux(%[[VAL_66]]#0, %[[VAL_82:.*]], %[[VAL_62]]) : (index, index, index) -> index
// CHECK:           %[[VAL_83:.*]]:2 = fork(%[[VAL_81]]) : (index) -> (index, index)
// CHECK:           %[[VAL_84:.*]] = arith.cmpi slt, %[[VAL_83]]#1, %[[VAL_68]]#1 : index
// CHECK:           %[[VAL_85:.*]]:8 = fork(%[[VAL_84]]) : (i1) -> (i1, i1, i1, i1, i1, i1, i1, i1)
// CHECK:           %[[VAL_86:.*]], %[[VAL_87:.*]] = conditional_branch(%[[VAL_85]]#7, %[[VAL_68]]#0) : (i1, index) -> (index, index)
// CHECK:           sink(%[[VAL_87]]) : (index) -> ()
// CHECK:           %[[VAL_88:.*]], %[[VAL_89:.*]] = conditional_branch(%[[VAL_85]]#6, %[[VAL_69]]) : (i1, index) -> (index, index)
// CHECK:           sink(%[[VAL_89]]) : (index) -> ()
// CHECK:           %[[VAL_90:.*]], %[[VAL_91:.*]] = conditional_branch(%[[VAL_85]]#5, %[[VAL_71]]) : (i1, index) -> (index, index)
// CHECK:           %[[VAL_92:.*]], %[[VAL_93:.*]] = conditional_branch(%[[VAL_85]]#4, %[[VAL_73]]) : (i1, index) -> (index, index)
// CHECK:           %[[VAL_94:.*]], %[[VAL_95:.*]] = conditional_branch(%[[VAL_85]]#3, %[[VAL_75]]) : (i1, index) -> (index, index)
// CHECK:           %[[VAL_96:.*]], %[[VAL_97:.*]] = conditional_branch(%[[VAL_85]]#2, %[[VAL_77]]) : (i1, index) -> (index, index)
// CHECK:           %[[VAL_98:.*]], %[[VAL_99:.*]] = conditional_branch(%[[VAL_85]]#1, %[[VAL_79]]#0) {control = true} : (i1, none) -> (none, none)
// CHECK:           %[[VAL_100:.*]], %[[VAL_101:.*]] = conditional_branch(%[[VAL_85]]#0, %[[VAL_83]]#0) : (i1, index) -> (index, index)
// CHECK:           sink(%[[VAL_101]]) : (index) -> ()
// CHECK:           %[[VAL_102:.*]] = merge(%[[VAL_100]]) : (index) -> index
// CHECK:           %[[VAL_103:.*]] = merge(%[[VAL_88]]) : (index) -> index
// CHECK:           %[[VAL_104:.*]]:2 = fork(%[[VAL_103]]) : (index) -> (index, index)
// CHECK:           %[[VAL_105:.*]] = merge(%[[VAL_86]]) : (index) -> index
// CHECK:           %[[VAL_106:.*]] = merge(%[[VAL_90]]) : (index) -> index
// CHECK:           %[[VAL_107:.*]] = merge(%[[VAL_92]]) : (index) -> index
// CHECK:           %[[VAL_108:.*]] = merge(%[[VAL_94]]) : (index) -> index
// CHECK:           %[[VAL_109:.*]] = merge(%[[VAL_96]]) : (index) -> index
// CHECK:           %[[VAL_110:.*]]:2 = control_merge(%[[VAL_98]]) {control = true} : (none) -> (none, index)
// CHECK:           sink(%[[VAL_110]]#1) : (index) -> ()
// CHECK:           %[[VAL_111:.*]] = arith.addi %[[VAL_102]], %[[VAL_104]]#1 : index
// CHECK:           %[[VAL_70]] = branch(%[[VAL_104]]#0) : (index) -> index
// CHECK:           %[[VAL_67]] = branch(%[[VAL_105]]) : (index) -> index
// CHECK:           %[[VAL_72]] = branch(%[[VAL_106]]) : (index) -> index
// CHECK:           %[[VAL_74]] = branch(%[[VAL_107]]) : (index) -> index
// CHECK:           %[[VAL_76]] = branch(%[[VAL_108]]) : (index) -> index
// CHECK:           %[[VAL_78]] = branch(%[[VAL_109]]) : (index) -> index
// CHECK:           %[[VAL_80]] = branch(%[[VAL_110]]#0) {control = true} : (none) -> none
// CHECK:           %[[VAL_82]] = branch(%[[VAL_111]]) : (index) -> index
// CHECK:           %[[VAL_112:.*]] = merge(%[[VAL_91]]) : (index) -> index
// CHECK:           %[[VAL_113:.*]] = merge(%[[VAL_93]]) : (index) -> index
// CHECK:           %[[VAL_114:.*]]:2 = fork(%[[VAL_113]]) : (index) -> (index, index)
// CHECK:           %[[VAL_115:.*]] = merge(%[[VAL_95]]) : (index) -> index
// CHECK:           %[[VAL_116:.*]] = merge(%[[VAL_97]]) : (index) -> index
// CHECK:           %[[VAL_117:.*]]:2 = control_merge(%[[VAL_99]]) {control = true} : (none) -> (none, index)
// CHECK:           sink(%[[VAL_117]]#1) : (index) -> ()
// CHECK:           %[[VAL_118:.*]] = arith.addi %[[VAL_112]], %[[VAL_114]]#1 : index
// CHECK:           %[[VAL_19]] = branch(%[[VAL_114]]#0) : (index) -> index
// CHECK:           %[[VAL_14]] = branch(%[[VAL_115]]) : (index) -> index
// CHECK:           %[[VAL_17]] = branch(%[[VAL_116]]) : (index) -> index
// CHECK:           %[[VAL_21]] = branch(%[[VAL_117]]#0) {control = true} : (none) -> none
// CHECK:           %[[VAL_23]] = branch(%[[VAL_118]]) : (index) -> index
// CHECK:           %[[VAL_119:.*]]:2 = control_merge(%[[VAL_34]]) {control = true} : (none) -> (none, index)
// CHECK:           sink(%[[VAL_119]]#1) : (index) -> ()
// CHECK:           return %[[VAL_119]]#0 : none
// CHECK:         }
// CHECK:       }

    %c0 = arith.constant 0 : index
    %c42 = arith.constant 42 : index
    %c1 = arith.constant 1 : index
    br ^bb1(%c0 : index)
  ^bb1(%0: index):      // 2 preds: ^bb0, ^bb5
    %1 = arith.cmpi slt, %0, %c42 : index
    cond_br %1, ^bb2, ^bb6
  ^bb2: // pred: ^bb1
    %c-1 = arith.constant -1 : index
    %2 = arith.muli %0, %c-1 : index
    %3 = arith.addi %2, %arg0 : index
    %4 = arith.cmpi sgt, %0, %3 : index
    %5 = select %4, %0, %3 : index
    %c10 = arith.constant 10 : index
    %6 = arith.addi %0, %c10 : index
    %7 = arith.cmpi slt, %arg0, %6 : index
    %8 = select %7, %arg0, %6 : index
    %c1_0 = arith.constant 1 : index
    br ^bb3(%5 : index)
  ^bb3(%9: index):      // 2 preds: ^bb2, ^bb4
    %10 = arith.cmpi slt, %9, %8 : index
    cond_br %10, ^bb4, ^bb5
  ^bb4: // pred: ^bb3
    %11 = arith.addi %9, %c1_0 : index
    br ^bb3(%11 : index)
  ^bb5: // pred: ^bb3
    %12 = arith.addi %0, %c1 : index
    br ^bb1(%12 : index)
  ^bb6: // pred: ^bb1
    return
  }
