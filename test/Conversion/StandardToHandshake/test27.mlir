// NOTE: Assertions have been autogenerated by utils/update_mlir_test_checks.py
// RUN: circt-opt -lower-std-to-handshake %s | FileCheck %s
func @simple_loop() {
// CHECK:       module {

// CHECK-LABEL:   handshake.func @simple_loop(
// CHECK-SAME:                                %[[VAL_0:.*]]: none, ...) -> none attributes {argNames = ["inCtrl"], resNames = ["outCtrl"]} {
// CHECK:           %[[VAL_1:.*]] = branch(%[[VAL_0]]) {control = true} : (none) -> none
// CHECK:           %[[VAL_2:.*]]:2 = control_merge(%[[VAL_1]]) {control = true} : (none) -> (none, index)
// CHECK:           %[[VAL_3:.*]]:2 = fork(%[[VAL_2]]#0) {control = true} : (none) -> (none, none)
// CHECK:           sink(%[[VAL_2]]#1) : (index) -> ()
// CHECK:           %[[VAL_4:.*]] = constant(%[[VAL_3]]#0) {value = 1 : index} : (none) -> index
// CHECK:           %[[VAL_5:.*]]:2 = fork(%[[VAL_4]]) : (index) -> (index, index)
// CHECK:           %[[VAL_6:.*]] = branch(%[[VAL_3]]#1) {control = true} : (none) -> none
// CHECK:           %[[VAL_7:.*]] = branch(%[[VAL_5]]#0) : (index) -> index
// CHECK:           %[[VAL_8:.*]] = branch(%[[VAL_5]]#1) : (index) -> index
// CHECK:           %[[VAL_9:.*]] = mux(%[[VAL_10:.*]]#1, %[[VAL_11:.*]], %[[VAL_8]]) : (index, index, index) -> index
// CHECK:           %[[VAL_12:.*]]:2 = fork(%[[VAL_9]]) : (index) -> (index, index)
// CHECK:           %[[VAL_13:.*]]:2 = control_merge(%[[VAL_14:.*]], %[[VAL_6]]) {control = true} : (none, none) -> (none, index)
// CHECK:           %[[VAL_10]]:2 = fork(%[[VAL_13]]#1) : (index) -> (index, index)
// CHECK:           %[[VAL_15:.*]] = mux(%[[VAL_10]]#0, %[[VAL_16:.*]], %[[VAL_7]]) : (index, index, index) -> index
// CHECK:           %[[VAL_17:.*]]:2 = fork(%[[VAL_15]]) : (index) -> (index, index)
// CHECK:           %[[VAL_18:.*]] = arith.cmpi slt, %[[VAL_17]]#1, %[[VAL_12]]#1 : index
// CHECK:           %[[VAL_19:.*]]:3 = fork(%[[VAL_18]]) : (i1) -> (i1, i1, i1)
// CHECK:           %[[VAL_20:.*]], %[[VAL_21:.*]] = conditional_branch(%[[VAL_19]]#2, %[[VAL_12]]#0) : (i1, index) -> (index, index)
// CHECK:           sink(%[[VAL_21]]) : (index) -> ()
// CHECK:           %[[VAL_22:.*]], %[[VAL_23:.*]] = conditional_branch(%[[VAL_19]]#1, %[[VAL_13]]#0) {control = true} : (i1, none) -> (none, none)
// CHECK:           %[[VAL_24:.*]], %[[VAL_25:.*]] = conditional_branch(%[[VAL_19]]#0, %[[VAL_17]]#0) : (i1, index) -> (index, index)
// CHECK:           sink(%[[VAL_25]]) : (index) -> ()
// CHECK:           %[[VAL_26:.*]] = merge(%[[VAL_24]]) : (index) -> index
// CHECK:           %[[VAL_27:.*]] = merge(%[[VAL_20]]) : (index) -> index
// CHECK:           %[[VAL_28:.*]]:2 = control_merge(%[[VAL_22]]) {control = true} : (none) -> (none, index)
// CHECK:           %[[VAL_29:.*]]:2 = fork(%[[VAL_28]]#0) {control = true} : (none) -> (none, none)
// CHECK:           sink(%[[VAL_28]]#1) : (index) -> ()
// CHECK:           %[[VAL_30:.*]] = constant(%[[VAL_29]]#0) {value = 1 : index} : (none) -> index
// CHECK:           %[[VAL_31:.*]] = arith.addi %[[VAL_26]], %[[VAL_30]] : index
// CHECK:           %[[VAL_11]] = branch(%[[VAL_27]]) : (index) -> index
// CHECK:           %[[VAL_14]] = branch(%[[VAL_29]]#1) {control = true} : (none) -> none
// CHECK:           %[[VAL_16]] = branch(%[[VAL_31]]) : (index) -> index
// CHECK:           %[[VAL_32:.*]]:2 = control_merge(%[[VAL_23]]) {control = true} : (none) -> (none, index)
// CHECK:           sink(%[[VAL_32]]#1) : (index) -> ()
// CHECK:           return %[[VAL_32]]#0 : none
// CHECK:         }
// CHECK:       }

^bb0:
  br ^bb1
^bb1:	// pred: ^bb0
  %c1 = arith.constant 1 : index
  br ^bb2(%c1 : index)
^bb2(%0: index):	// 2 preds: ^bb1, ^bb3
  %1 = arith.cmpi slt, %0, %c1 : index
  cond_br %1, ^bb3, ^bb4
^bb3:	// pred: ^bb2
  %c1_0 = arith.constant 1 : index
  %2 = arith.addi %0, %c1_0 : index
  br ^bb2(%2 : index)
^bb4:	// pred: ^bb2
  return
}
